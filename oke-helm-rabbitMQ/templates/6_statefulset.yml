apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: {{ .Values.deployment.namespace }}
spec:
  selector:
    matchLabels:
      app: "rabbitmq"
  serviceName: rabbitmq-headless 
  replicas: {{ .Values.deployment.replicas }}
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-data
      spec:
        storageClassName: "oci-bv"
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "500Gi"
  template:
    metadata:
      name: rabbitmq
      labels:
        app: rabbitmq
    spec:
      initContainers:
        - name: "rabbitmq-config"
          image: busybox:1.32.0
          volumeMounts:
            - name: rabbitmq-config
              mountPath: /tmp/rabbitmq
            - name: rabbitmq-config-rw
              mountPath: /etc/rabbitmq
          command:
          - sh
          - -c
          - cp /tmp/rabbitmq/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf && echo '' >> /etc/rabbitmq/rabbitmq.conf;
            cp /tmp/rabbitmq/enabled_plugins /etc/rabbitmq/enabled_plugins

      volumes:
        - name: rabbitmq-config
          configMap:
            name: rabbitmq-config
            optional: false
            items:
              - key: enabled_plugins
                path: "enabled_plugins"
              - key: rabbitmq.conf
                path: "rabbitmq.conf"
        - name: rabbitmq-config-rw
          emptyDir: {}
        - name: rabbitmq-data
          persistentVolumeClaim:
            claimName: rabbitmq-data
      serviceAccount: rabbitmq
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
      imagePullSecrets:
        - name: ocir-key
      dnsConfig:
        searches:
          - rabbitmq-headless.rabbitmq.svc.cluster.local
      nodeSelector:
        name: {{ .Values.deployment.node_selector }}
      containers:
        - name: rabbitmq
          image: {{ .Values.deployment.image }}:{{ .Values.deployment.version }}
          volumeMounts:
            - name: rabbitmq-config-rw
              mountPath: "/etc/rabbitmq"
            - name: rabbitmq-data
              mountPath: "/var/lib/rabbitmq/mnesia"
          env:
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-admin
                  key: password
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-admin
                  key: username
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: erlang-cookie
                  key: cookie
          ports:
            - name: amqp
              containerPort: {{ .Values.deployment.amqpContainerPort }}
              protocol: TCP
            - name: management
              containerPort: {{ .Values.deployment.managementContainerPort }}
              protocol: TCP
            - name: prometheus
              containerPort: {{ .Values.deployment.prometheusContainerPort }}
              protocol: TCP
            - name: epmd
              containerPort: {{ .Values.deployment.epmdContainerPort }}
              protocol: TCP
          livenessProbe:
            exec:
              command: ["rabbitmq-diagnostics", "status"]
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 15
          readinessProbe:
            exec:
              command: ["rabbitmq-diagnostics", "ping"]
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 10
